%%FLOAT a , b, c ; 
%%a = 1.0;
%%b = 0.0;
%%c = -2.0f+1;
%%IF ( a - b > c + 1.0 ) {
%%    a  = b;
%%} END_IF ;
%%OUT("termine de comparar");


LONGINT a,b;
a = 3_l; 
b = 4_l;
FLOAT w;
w = 2.0;
PROC procedimiento(FLOAT x, REF LONGINT z) NI = 3_l {
    LONGINT a,b;
    FLOAT c;
    a = z;
    c = x * z;
    IF ( c == 12_l) {
        OUT ("iguales");
    } END_IF;
    z = 3_l;
    PROC invocacion() NI = 2_l {
        b = a;	
        PROC procedimiento() NI = 1_l {
            b = a;
        };
        procedimiento();
    };
    invocacion();
};
procedimiento(z:b,x:a);
IF (b == 3_l){
    OUT("funciona referencia");
}END_IF;



.386
.model flat, stdcall
option casemap :none
include \masm32\include\windows.inc
include \masm32\include\kernel32.inc
include \masm32\include\user32.inc
includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\user32.lib
.data
ERROR_DIVISION_CERO db "Error: no es posible divir por cero.", 0
ERROR_OVERFLOW_SUMA db "Error: overflow en suma.", 0
FLOAT_CERO DQ 0.0
MINIMO_POSITIVO DQ 1.17549435e-38
MINIMO_NEGATIVO DQ -1.17549435e-38
MAXIMO_POSITIVO DQ 3.40282347e38
MAXIMO_NEGATIVO DQ -3.40282347e38
@aux DQ ?
_Constante0 dd 0.0
_Constante1 dd 50.0
_Constante2 dd 40.0
_f3@main dd ?
_Cadena0 db "TERMINO BIEN", 0
_f2@main dd ?
_Cadena1 db "comparo bien", 0
_f1@main dd ?
_@aux0 dd ?
.code
START:
FLD _Constante1
FADD _Constante2
FST @aux
CALL OVERFLOW_FLOAT
FSTP _@aux0
FLD _@aux0
FSTP _f1@main
FINIT
FLD _f1@main
FCOMP _Constante0
FSTSW AX
SAHF
JNE L14
invoke MessageBox, NULL, addr _Cadena1, addr  _Cadena1, MB_OK
JMP L15
L14:
L15:
invoke MessageBox, NULL, addr _Cadena0, addr  _Cadena0, MB_OK
invoke ExitProcess, 0
__etiquetaErrorOverflow__:
invoke MessageBox, NULL, addr ERROR_OVERFLOW_SUMA, addr  ERROR_OVERFLOW_SUMA, MB_OK
invoke ExitProcess, 0
__etiquetaErrorDivCero__:
invoke MessageBox, NULL, addr ERROR_DIVISION_CERO, addr ERROR_DIVISION_CERO, MB_OK
invoke ExitProcess, 0
FLOAT_VALIDO:
RET
OVERFLOW_FLOAT:
FINIT
FLD @aux
FCOM MAXIMO_POSITIVO
FSTSW AX
SAHF
JA __etiquetaErrorOverflow__
FINIT
FLD @aux
FCOM MINIMO_POSITIVO
FSTSW AX
SAHF
JA FLOAT_VALIDO
FINIT
FLD @aux
FCOM MAXIMO_NEGATIVO
FSTSW AX
SAHF
JB __etiquetaErrorOverflow__
FINIT
FLD @aux
FCOM MINIMO_NEGATIVO
FSTSW AX
SAHF
JB FLOAT_VALIDO
FINIT
FLD @aux
FCOM FLOAT_CERO
FSTSW AX
SAHF
JE FLOAT_VALIDO
JMP __etiquetaErrorOverflow__
END START
